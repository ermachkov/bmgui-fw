#!/usr/bin/python

import sys,  socket,  re,  os,  time,  getpass
import subprocess as sub

#Get firmware version from file
def GetVersionFromFile( filename ):
    if ( not os.path.isfile(filename) ):
      print "This is not firmware"
      exit(1)
    f = open(filename, "rb")
    data = ""
    try:
        #Type
        while(1):
            byte = f.read(1)
            if(byte=="\x3A"):
                count = f.read(2)
                count = int(count,16)
                f.read(4)
                type = f.read(2);
                if (type == "00"):
                    data = (data + f.read(count*2))
                    f.read(2)
                    continue
                elif(type == "04"):
                   f.read(3)
                   continue
                elif (type == "01"):
                   f.read(1)
                   break
                elif (type == "02"):
                   f.read(3)
                   continue
                elif (type == "05"):
                   f.read(5)
                   continue
    finally:
        f.close()

    ver = [0, 0]
    pos = data.find("C2EE20E2F1B8EC20E2E8EDEEE2E0F2FB20EFEEEFFB") + 42
    ver[0] = data[pos] + data[pos+1]
    ver[1] = data[pos+2] + data[pos+3]

    ver[0] = int(ver[0])-30
    ver[1] = int(ver[1])-30
    
    return ver;

#Connect to MB
def ConnectMB( ip ):
    HOST = ip
    PORT = 23
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        s.connect((HOST, PORT))
    except socket.error:
        return 0
    else:
        s.send('\xff\xfd\x03\xff\xfb\x18\xff\xfb\x1f\xff\xfb\x20\xff\xfb\x21\xff\xfb\x22\xff\xfb\x27\xff\xfd\x05\xff\xfb\x23')
        data = s.recv(1024)
        s.send('\xff\xfb\x03')
        data = s.recv(1024)
        return s

#Disconnect from MB
def DisconnectMB( socket ):
    socket.send('\xff\xf4\xff\xfd\x06')
    socket.shutdown(2)
    socket.close()

#MAIN

#Check args
if( len(sys.argv) < 3 or len(sys.argv) > 4 ):
  print "usage: "+sys.argv[0]+" ip firmware [--force]"
  exit(0)

if ( getpass.getuser() != "root" ):
  print "Permission denied. Are you are root?"
  exit(1)

#Get args
ip = sys.argv[1]
fwfile = sys.argv[2]

force = 0

if( len(sys.argv) == 4 ):
  if ( sys.argv[3] == "--force" ): 
    force = 1

#Connecting to MB
MB = ConnectMB(ip)
if ( not MB ):
  print "Can't connect to MB. Check network connection"
  exit(1)
print "Connection to MB established"

#Get firmware version on MB
MB.send('info\r\n')
data = MB.recv(1024)

if( not force and data == "ok\r\n" ):
  print "Old firmware detected\nPlease flash MB manually or use --force"
  exit(1)
else:
  if( not force and data != "We are in NORMAL mode\r\n" ):
    print "MB is not in NORMAL mode"
    print "MB answer: "+data
    print "You can use bmgui_flash only in NORMAL mode"
    exit(1)

MB.send('g ver\r\n')
data = MB.recv(1024)

link_re = re.compile('Version ([0-9])*\.([0-9]*)')
buf = link_re.findall(data)
DisconnectMB(MB)

hwver = [0, 0];
hwver[0] = int(buf[0][0])
hwver[1] = int(buf[0][1])


#Cheking new firmware
os.popen("mkdir /tmp/tmpbsfw  > /dev/null 2> /dev/null")
os.popen("tar -jxvf "+fwfile+" -C /tmp/tmpbsfw/   > /dev/null 2> /dev/null")
firmwares =  os.listdir("/tmp/tmpbsfw/")

link_re = re.compile('bsfw-(\d*)\.(\d*).tbz')

aver = 0;
match = 0;

for a in firmwares:
  buf = link_re.findall(a)
  if(int(buf[0][0]) == hwver[0]):
    match = 1;
    if( aver < int(buf[0][1]) ):
      aver = int(buf[0][1])

if( match == 0 ):
  print "No any suitable firmware found"
  exit(1)

os.popen("tar -jxvf /tmp/tmpbsfw/bsfw-"+str(hwver[0])+"."+str(aver)+".tbz -C /tmp/tmpbsfw/   > /dev/null 2> /dev/null")

#try:
ver = GetVersionFromFile("/tmp/tmpbsfw/fware.hex")

#Backup original firmware
print "Backing up original firmware..."

curdir = os.getcwd()

if ( os.path.isfile("/usr/share/bmgui/fw/bsfw-"+str(hwver[0])+"."+str(hwver[1])+".backup.tbz") ):
  print "Found backup in /usr/share/bmgui/fw/bsfw-"+str(hwver[0])+"."+str(hwver[1])+".backup.tbz"
  print "Backing up skipped"
else:
  os.popen("mkdir /tmp/tmpbsfwb  > /dev/null 2> /dev/null")
  os.popen("cd /tmp/tmpbsfwb && wget http://"+ip+"/balance.ini > /dev/null 2> /dev/null")
  os.popen("cd /tmp/tmpbsfwb && wget http://"+ip+"/firmware.a00 > /dev/null 2> /dev/null")
  os.popen("cd /tmp/tmpbsfwb && wget http://"+ip+"/fware.hex > /dev/null 2> /dev/null")
  os.popen("cd /tmp/tmpbsfwb && wget http://"+ip+"/sciload.a00 > /dev/null 2> /dev/null")
  os.popen("cd /tmp/tmpbsfwb && tar -jcvf bsfw-"+str(hwver[0])+"."+str(hwver[1])+".backup.tbz * > /dev/null 2> /dev/null")
  os.popen("mkdir -p /usr/share/bmgui/fw > /dev/null 2> /dev/null")
  os.popen("mv /tmp/tmpbsfwb/bsfw-"+str(hwver[0])+"."+str(hwver[1])+".backup.tbz /usr/share/bmgui/fw/ && rm -rf /tmp/tmpbsfwb")
  print "Backup saved into: /usr/share/bmgui/fw/bsfw-"+str(hwver[0])+"."+str(hwver[1])+".backup.tbz"

if (hwver[0] == ver[0]):
    print "HW Matches"
    print "\nBalance firmware version: " + str(hwver[1])
    print "File firmware version: " + str(ver[1])
    print "Flashing..."
    proc = sub.Popen(["ls", "-1", "/tmp/tmpbsfw/"], stdout=sub.PIPE)
    files = proc.communicate()
    link_re = re.compile('(fware\.hex)')
    buf = link_re.findall(files[0]) 
    if ( buf ) :
        os.popen("cd /tmp/tmpbsfw/ && cksum fware.hex > fware.crc")
        os.popen("cd /tmp/tmpbsfw/ && wget "+ip+" --header=\"666:filename=fware.hex\" --post-file=fware.hex -O /dev/null > /dev/null 2> /dev/null")
        os.popen("cd /tmp/tmpbsfw/ && wget "+ip+" --header=\"666:filename=fware.crc\" --post-file=fware.crc -O /dev/null > /dev/null 2> /dev/null")
        print "fware.hex flashed"
    link_re = re.compile('(firmware\.a00)')
    buf = link_re.findall(files[0])
    if ( buf ) : 
        os.popen("cd /tmp/tmpbsfw/ && wget "+ip+" --header=\"666:filename=firmware.a00\" --post-file=firmware.a00 -O /dev/null > /dev/null 2> /dev/null")
        print "firmware.a00 flashed"
    link_re = re.compile('(sciload\.a00)')
    buf = link_re.findall(files[0])  
    if ( buf ) :
        os.popen("cd /tmp/tmpbsfw/ && wget "+ip+" --header=\"666:filename=sciload.a00\" --post-file=sciload.a00 -O /dev/null > /dev/null 2> /dev/null")
        print "sciload.a00 flashed"
    link_re = re.compile('(balance\.ini)')
    buf = link_re.findall(files[0])
    if ( buf ) :
        os.popen("cd /tmp/tmpbsfw/ && wget "+ip+" --header=\"666:filename=balance.ini\" --post-file=balance.ini -O /dev/null > /dev/null 2> /dev/null")
        print "balance.ini flashed"
    os.popen("rm -rf /tmp/tmpbsfw/ > /dev/null 2> /dev/null")
    #Going in flash mode
    MB = ConnectMB(ip)
    MB.send('softpart\r\n')
    data = MB.recv(1024)
    if( data == "control ok\r\n" ):
        DisconnectMB(MB)
    else:
        print "Something wrong try to reboot balance and repeat flash"
        exit(1)
    print("Waiting for flash mode")
    i=0
    while (1):
        i=i+1
        time.sleep(10)
        MB = ConnectMB(ip)
        MB.send('writehware\r\n')
        data = MB.recv(1024)
        if(data == "F97\r\n"):
            time.sleep(5)
            DisconnectMB(MB)
            break
        else:
            DisconnectMB(MB)
            continue
        if (i>5):
            print "Something wrong try to reboot balance"
            exit(1)
    print "Flashed successfully"
    print "MB Disconnected"
    print "\nReboot Balance please"
else:
   print "HW mismatch. Wrong firmware"
   exit(1)

os.popen("rm -rf /tmp/tmpbsfw");

exit(0)

